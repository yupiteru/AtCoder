{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"For each": {
		"prefix": "fore",
		"body": [
			"foreach (var $1 in $2) {",
			"\t$0",
			"}"
		],
		"description": "for each"
	},
	"For loop": {
		"prefix": "forl",
		"body": [
			"for (var $1 = $2;$1 < $3;++$1) {",
			"\t$0",
			"}"
		],
		"description": "for loop"
	},
	"For Rev loop": {
		"prefix": "forr",
		"body": [
			"for (var $1 = $2;$1 >= $3;--$1) {",
			"\t$0",
			"}"
		],
		"description": "for rev loop"
	},
	"Multi Input": {
		"prefix": "multin",
		"body": [
			"Repeat(0, $1).Select(_ => new { $2 } ).ToArray();",
			"$0"
		],
		"description": "multi in"
	},
	"Output Line": {
		"prefix": "outl",
		"body": [
			"Console.WriteLine($1);"
		],
		"description": "output line"
	},
	"Output": {
		"prefix": "out",
		"body": [
			"Console.Write($1);"
		],
		"description": "output"
	},
	"Ruiseki Wa": {
		"prefix": "risk",
		"body": [
			"var $1 = new long[$2 + 1];",
			"for (var i = 1; i <= $2; ++i)",
			"{",
			"    $1[i] = $1[i - 1] + $3[i - 1];",
			"}",
			"$0"
		],
		"description": "ruiseki wa"
	},
	"BFS": {
		"prefix": "bfs",
		"body": [
			"{",
			"    var done = new bool[N];",
			"    var q = new Queue<long>();",
			"    done[0] = true;",
			"    q.Enqueue(0);",
			"    while (q.Count > 0)",
			"    {",
			"        var v = q.Dequeue();",
			"        foreach (var item in path[v])",
			"        {",
			"            if (done[item]) continue;",
			"            done[item] = true;",
			"            q.Enqueue(item);",
			"        }",
			"    }",
			"}"
		],
		"description": "BFS"
	},
	"Swap": {
		"prefix": "swap",
		"body": [
			"var $1 = $2; $2 = $3; $3 = $1;",
			"$0"
		],
		"description": "Swap"
	},
	"Daikusutora O(V^2)": {
		"prefix": "daikusutoravv",
		"body": [
			"{",
			"    var nodeNum = 0;",
			"    var start = 0;",
			"    var dist = Repeat(1000000000000000000, nodeNum).ToArray();",
			"    dist[start] = 0;",
			"    var close = new bool[nodeNum];",
			"    while (true)",
			"    {",
			"        var minDist = 1000000000000000000; // !!!",
			"        var minVtx = -1;",
			"        for (var k = 0; k < nodeNum; ++k)",
			"        {",
			"            if (!close[k])",
			"            {",
			"                if (minDist > dist[k]) // !!!",
			"                {",
			"                    minDist = dist[k];",
			"                    minVtx = k;",
			"                }",
			"            }",
			"        }",
			"        if (minVtx == -1) break;",
			"        close[minVtx] = true;",
			"        foreach (var item in path[minVtx])",
			"        {",
			"            var distTemp = dist[minVtx] + 1; // !!!",
			"            if (dist[item.Item1] > distTemp) // !!!",
			"            {",
			"                dist[item.Item1] = distTemp;",
			"            }",
			"        }",
			"    }",
			"}"
		],
		"description": "Daikusutora O(V^2)"
	},
	"Daikusutora O(ElogV)": {
		"prefix": "daikusutoraelogv",
		"body": [
			"{",
			"    var nodeNum = 0;",
			"    var start = 0;",
			"    var dist = Repeat(long.MaxValue >> 2, nodeNum).ToArray();",
			"    var pred = new int?[nodeNum];",
			"    dist[start] = 0;",
			"    var q = new LIB_PriorityQueue();",
			"    q.Push(0, (int)start);",
			"    while (q.Count > 0)",
			"    {",
			"        var u = q.Pop();",
			"        if (dist[u.Item2] < u.Item1) continue;",
			"        foreach (var pathItem in path[u.Item2])",
			"        {",
			"            var v = pathItem.Key;",
			"            var alt = u.Item1 + pathItem.Value;",
			"            if (dist[v] > alt)",
			"            {",
			"                dist[v] = alt;",
			"                pred[v] = u;",
			"                q.Push(alt, v);",
			"            }",
			"        }",
			"    }",
			"}"
		],
		"description": "Daikusutora O(ElogV)"
	},
	"berumanfo-do": {
		"prefix": "berumanfo-do",
		"body": [
			"{",
			"    var nodeNum = 0;",
			"    var start = 0;",
			"    var dist = Repeat(INF, nodeNum).ToArray();",
			"    var pred = new int?[nodeNum];",
			"    var neg = new bool[nodeNum];",
			"    dist[start] = 0;",
			"    for (var i = 1; i < nodeNum; ++i)",
			"        foreach (var path in pathList)",
			"            if (dist[path.Item2] > (dist[path.Item1] == INF ? INF : dist[path.Item1] + path.Item3))",
			"            {",
			"                dist[path.Item2] = dist[path.Item1] + path.Item3;",
			"                pred[path.Item2] = path.Item1;",
			"            }",
			"    for (var i = 0; i < nodeNum; ++i)",
			"        foreach (var path in pathList)",
			"            if (dist[path.Item2] > (dist[path.Item1] == INF ? INF : dist[path.Item1] + path.Item3) || neg[path.Item1])",
			"            {",
			"                dist[path.Item2] = dist[path.Item1] + path.Item3;",
			"                neg[path.Item2] = true;",
			"            }",
			"}"
		],
		"description": "berumanfo-do"
	},
	"scc": {
		"prefix": "scc",
		"body": [
            "var scc = new LIB_StronglyConnectedComponents($1);",
            "foreach (var item in $2)",
            "{",
            "    scc.AddPath(item.$3, item.$4);",
			"}",
			"var ret = scc.SCC();",
			"var gyaku = new long[$1];",
			"for (var i = 0; i < ret.Length; ++i)",
			"{",
			"    foreach (var item in ret[i])",
			"    {",
			"        gyaku[item] = i;",
			"    }",
			"}",
			"var path = Repeat(0, ret.Length).Select(_ => new HashSet<long>()).ToArray();",
			"foreach (var item in $2)",
			"{",
			"    if (gyaku[item.$3] == gyaku[item.$4]) continue;",
			"    path[gyaku[item.$3]].Add(gyaku[item.$4]);",
			"}",
			"$0"
		],
		"description": "scc"
	}
}